#!/usr/bin/env perl
use 5.010;
use lib 't/lib';
use Moose;
use Hailo::Test;
use Benchmark qw(:all);
use File::Temp qw(tempfile tempdir);
use Test::More;
use namespace::clean -except => 'meta';

my $test_count = $ARGV[0] // 10;
my @storages = $ARGV[1] ? (split /,/, $ARGV[1]) : Hailo::Test::all_storages();

# Dir to store our training file / brains
my $dir = tempdir( CLEANUP => 1 );

my %hailos;
my %test;

for my $storage (@storages) {
    for my $cnt (1 .. $test_count) {
        my $tmpdir = tempdir( DIR => $dir, CLEANUP => 1 );
        my $hailo = Hailo::Test->new(
            tmpdir => $tmpdir,
            storage => $storage,
        );

        my $ok = $hailo->spawn_storage();

        # Don't garbage collect me
        $hailo->{_stash} = $tmpdir;

        pass "Created storage $storage $cnt/$test_count";

        # Push a hailo
        push @{ $hailos{$storage} } => $hailo;
    }

    $test{$storage} = sub {
        state $iter = 0;
        my $hailo = $hailos{$storage}->[$iter];

        $hailo->test_known();

        $iter++;
    };
}

cmpthese($test_count, \%test);

# XXX: Do this in Hailo::Test destructor
for my $storage (@storages) {
    for my $hailo (@{ $hailos{$storage} }) {
        pass "Nuking $storage storage";
        $hailo->unspawn_storage();
    }
}

done_testing();
